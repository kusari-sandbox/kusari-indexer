name: Build and Publish Docker Image

on:
  push:
    branches: [ main ]
    paths: [ 'Dockerfile', '.github/workflows/docker-build.yml' ]
  release:
    types: [ published ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        echo "Testing the built image..."
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest bash -c "
          echo '=== Testing SCIP tools ==='
          scip-go --help > /dev/null && echo '✅ scip-go works'
          scip-typescript --help > /dev/null && echo '✅ scip-typescript works'  
          scip-python --help > /dev/null && echo '✅ scip-python works'
          scip-java --help > /dev/null && echo '✅ scip-java works'
          echo '=== All tools verified ==='
        "

    - name: Tag and push to ttl.sh
      run: |
        echo "Tagging and pushing to ttl.sh..."
        docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest ttl.sh/kusari-indexer:latest
        docker push ttl.sh/kusari-indexer:latest
        echo "✅ Image pushed to ttl.sh/kusari-indexer:latest"
