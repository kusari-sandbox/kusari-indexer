name: Test SCIP Index Action

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-action:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      packages: read
    container:
      image: ghcr.io/${{ github.repository }}:latest
    
    strategy:
      matrix:
        test-scenario:
          - name: "real-projects"
            description: "Test with real open source projects"
          - name: "no-changes"
            description: "Test with no relevant file changes"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        persist-credentials: false

    - name: Verify SCIP tools are available
      shell: bash
      run: |
        echo "=== Verifying SCIP tools in container ==="
        for tool in scip-go scip-typescript scip-python scip-java; do
          if command -v $tool &> /dev/null; then
            echo "✅ $tool available: $(which $tool)"
            $tool --version 2>/dev/null || $tool --help 2>/dev/null | head -n 3 || echo "  (version info not available)"
          else
            echo "❌ $tool not found"
            exit 1
          fi
        done

    - name: Clone real test projects
      if: matrix.test-scenario.name != 'no-changes'
      shell: bash
      run: |
        echo "=== Cloning real open source projects for testing ==="
        mkdir -p test-projects
        cd test-projects
        
        # Go project - fatih/color (terminal colors library)
        echo "Cloning Go project: fatih/color"
        git clone --depth 1 https://github.com/fatih/color.git go-project
        
        # TypeScript project - sindresorhus/is (type checking utilities)
        echo "Cloning TypeScript project: sindresorhus/is"
        git clone --depth 1 https://github.com/sindresorhus/is.git typescript-project
        
        # Python project - psf/black (Python code formatter)
        echo "Cloning Python project: psf/black"
        git clone --depth 1 https://github.com/psf/black.git python-project
        
        # Create minimal Java project for testing (avoids complex build issues)
        echo "Creating minimal Java project for testing"
        mkdir -p java-project/src/main/java/com/test

    - name: Create Java test project
      if: matrix.test-scenario.name != 'no-changes'
      shell: bash
      run: |
        cd test-projects
        cat > java-project/pom.xml << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <project xmlns="http://maven.apache.org/POM/4.0.0"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
            <modelVersion>4.0.0</modelVersion>
            <groupId>com.test</groupId>
            <artifactId>scip-test-project</artifactId>
            <version>1.0-SNAPSHOT</version>
            <properties>
                <maven.compiler.source>11</maven.compiler.source>
                <maven.compiler.target>11</maven.compiler.target>
                <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
            </properties>
            <dependencies>
                <dependency>
                    <groupId>com.fasterxml.jackson.core</groupId>
                    <artifactId>jackson-core</artifactId>
                    <version>2.15.2</version>
                </dependency>
            </dependencies>
        </project>
        EOF
        
        cat > java-project/src/main/java/com/test/TestService.java << 'EOF'
        package com.test;
        
        import com.fasterxml.jackson.core.JsonFactory;
        import com.fasterxml.jackson.core.JsonParser;
        import java.io.IOException;
        import java.util.List;
        import java.util.ArrayList;
        
        public class TestService {
            private final JsonFactory jsonFactory;
            private List<String> items;
            
            public TestService() {
                this.jsonFactory = new JsonFactory();
                this.items = new ArrayList<>();
            }
            
            public void addItem(String item) {
                items.add(item);
            }
            
            public List<String> getItems() {
                return new ArrayList<>(items);
            }
            
            public JsonParser createParser(String json) throws IOException {
                return jsonFactory.createParser(json);
            }
            
            public void processData(String data) {
                try {
                    JsonParser parser = createParser(data);
                    addItem("Processed: " + data);
                } catch (IOException e) {
                    addItem("Error: " + e.getMessage());
                }
            }
        }
        EOF
        
        cat > java-project/src/main/java/com/test/Main.java << 'EOF'
        package com.test;
        
        public class Main {
            public static void main(String[] args) {
                TestService service = new TestService();
                service.addItem("Hello, World!");
                service.processData("{\"name\":\"test\"}");
                
                System.out.println("Items: " + service.getItems());
            }
        }
        EOF

    - name: Install Java build tools
      if: matrix.test-scenario.name != 'no-changes'
      shell: bash
      run: |
        echo "=== Installing Java build tools for testing ==="
        
        # Update package list
        apt-get update
        
        # Install prerequisites
        apt-get install -y wget unzip curl gnupg
        
        # Install Maven
        echo "Installing Maven..."
        apt-get install -y maven
        
        # Install Gradle
        echo "Installing Gradle..."
        wget -q https://services.gradle.org/distributions/gradle-8.5-bin.zip -O /tmp/gradle.zip
        unzip -q /tmp/gradle.zip -d /opt
        rm /tmp/gradle.zip
        ln -sf /opt/gradle-8.5/bin/gradle /usr/local/bin/gradle
        chmod +x /opt/gradle-8.5/bin/gradle
        
        # Clean up
        rm -rf /var/lib/apt/lists/*
        
        # Verify installations
        echo "=== Build Tool Versions ==="
        java -version
        echo "Maven:" && mvn --version | head -n 1
        echo "Gradle:" && gradle --version | head -n 1
        echo "=== All tools installed successfully ==="

    - name: Create test project with no relevant changes
      if: matrix.test-scenario.name == 'no-changes'
      shell: bash
      run: |
        echo "=== Creating test project structure with no relevant changes ==="
        mkdir -p test-projects/docs-only
        cat > test-projects/docs-only/README.md << 'EOF'
        # Documentation Project
        This project only contains documentation files.
        EOF
        
        cat > test-projects/docs-only/CHANGELOG.md << 'EOF'
        # Changelog
        ## v1.0.0
        - Initial documentation
        EOF
        
        echo "Created test-projects directory structure:"
        ls -la test-projects/ || echo "test-projects directory not found"

    - name: Show project structure
      if: matrix.test-scenario.name != 'no-changes'
      shell: bash
      run: |
        echo "=== Project structure ==="
        find test-projects -maxdepth 2 -name "*.mod" -o -name "package.json" -o -name "setup.py" -o -name "pyproject.toml" -o -name "pom.xml" -o -name "build.gradle*" | head -20

    - name: Test the SCIP action
      id: test-action
      uses: ./
      with:
        working-directory: test-projects

    - name: Verify action outputs
      shell: bash
      run: |
        echo "=== Action Outputs ==="
        echo "Success count: '${{ steps.test-action.outputs.success-count }}'"
        echo "Skipped: '${{ steps.test-action.outputs.skipped }}'"
        
        # Verify outputs match expectations for each scenario
        case "${{ matrix.test-scenario.name }}" in
          "no-changes")
            if [[ "${{ steps.test-action.outputs.skipped }}" == "true" ]]; then
              echo "✅ No-changes scenario: correctly skipped"
            else
              echo "❌ No-changes scenario: should have been skipped"
              echo "Expected: skipped=true, Got: skipped=${{ steps.test-action.outputs.skipped }}"
              exit 1
            fi
            ;;
          "real-projects")
            if [[ "${{ steps.test-action.outputs.skipped }}" == "false" ]]; then
              echo "✅ Processing scenario: correctly processed projects"
              
              success_count="${{ steps.test-action.outputs.success-count }}"
              
              if [[ "$success_count" -gt 0 ]]; then
                echo "✅ Generated $success_count SCIP indexes"
              else
                echo "⚠️ No SCIP indexes generated successfully"
                echo "This could indicate issues with the SCIP tools or project setup"
              fi
            else
              echo "❌ Processing scenario: should have processed projects"
              echo "Expected: skipped=false, Got: skipped=${{ steps.test-action.outputs.skipped }}"
              exit 1
            fi
            ;;
        esac
