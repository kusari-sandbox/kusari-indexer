# action.yml
name: 'Generate SCIP Indexes for Changed Projects'
description: 'Automatically generates SCIP indexes for projects that have changed files in a PR or commit'
branding:
  icon: 'search'
  color: 'blue'

inputs:
  working-directory:
    description: 'Working directory to run the action from'
    required: false
    default: '.'

outputs:
  success-count:
    description: 'Number of projects successfully processed'
    value: ${{ steps.generate-indexes.outputs.success_count }}
  
  total-count:
    description: 'Total number of projects found'
    value: ${{ steps.generate-indexes.outputs.total_count }}
  
  failed-projects:
    description: 'List of projects that failed processing'
    value: ${{ steps.generate-indexes.outputs.failed_projects }}
  
  changed-projects:
    description: 'List of projects that had changes'
    value: ${{ steps.find-changed-projects.outputs.changed_projects }}
  
  skipped:
    description: 'Whether processing was skipped (no changes found)'
    value: ${{ steps.generate-indexes.outputs.skipped }}
  
  index-list:
    description: 'List of generated index files'
    value: ${{ steps.list-indexes.outputs.index_list }}
  
  total-size:
    description: 'Total size of generated indexes'
    value: ${{ steps.list-indexes.outputs.total_size }}

runs:
  using: 'composite'
  steps:
    - name: Verify SCIP tools
      shell: bash
      run: |
        echo "=== Verifying pre-installed SCIP tools ==="
        
        for tool in scip-go scip-typescript scip-python scip-java; do
          if command -v $tool &> /dev/null; then
            echo "✅ $tool available"
          else
            echo "❌ $tool not found"
            exit 1
          fi
        done

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v44
      with:
        files: |
          **/*.{go,ts,tsx,js,jsx,py,java,scala,kt}
          **/go.mod
          **/package.json
          **/setup.py
          **/pyproject.toml
          **/requirements.txt
          **/Pipfile
          **/pom.xml
          **/build.gradle
          **/build.gradle.kts

    - name: Find changed project directories
      id: find-changed-projects
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "=== Finding projects with changed files ==="
        
        # Get changed files from previous step
        changed_files="${{ steps.changed-files.outputs.all_changed_files }}"
        
        if [[ -z "$changed_files" ]]; then
          echo "No relevant files changed"
          echo "changed_projects=" >> $GITHUB_OUTPUT
          echo "project_count=0" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "Changed files: $changed_files"
        
        # Find unique project directories
        project_dirs=""
        declare -A seen_dirs
        
        for file in $changed_files; do
          dir=$(dirname "$file")
          
          # Walk up the directory tree to find project root
          while [[ "$dir" != "." && "$dir" != "/" ]]; do
            if [[ -f "$dir/go.mod" ]] || [[ -f "$dir/package.json" ]] || [[ -f "$dir/setup.py" ]] || \
               [[ -f "$dir/pyproject.toml" ]] || [[ -f "$dir/pom.xml" ]] || [[ -f "$dir/build.gradle" ]] || \
               [[ -f "$dir/build.gradle.kts" ]]; then
              if [[ -z "${seen_dirs[$dir]}" ]]; then
                seen_dirs["$dir"]=1
                project_dirs="$project_dirs$dir"$'\n'
                echo "Found project: $dir (from file: $file)"
              fi
              break
            fi
            dir=$(dirname "$dir")
          done
          
          # Check root directory as fallback
          if [[ "$dir" == "." ]] && [[ -z "${seen_dirs[.]}" ]]; then
            if [[ -f "./go.mod" ]] || [[ -f "./package.json" ]] || [[ -f "./setup.py" ]] || \
               [[ -f "./pyproject.toml" ]] || [[ -f "./pom.xml" ]] || [[ -f "./build.gradle" ]] || \
               [[ -f "./build.gradle.kts" ]]; then
              seen_dirs["."]=1
              project_dirs="$project_dirs."$'\n'
              echo "Found project: . (from file: $file)"
            fi
          fi
        done
        
        # Clean up the output
        project_dirs=$(echo -n "$project_dirs" | sed '/^$/d')
        project_count=$(echo -n "$project_dirs" | wc -l)
        
        if [[ -z "$project_dirs" ]]; then
          project_count=0
        fi
        
        echo "=== Projects to process ==="
        echo "$project_dirs"
        echo "Total projects: $project_count"
        
        # Export for next step
        {
          echo "changed_projects<<EOF"
          echo "$project_dirs"
          echo "EOF"
        } >> $GITHUB_OUTPUT
        
        echo "project_count=$project_count" >> $GITHUB_OUTPUT

    - name: Generate SCIP indexes
      id: generate-indexes
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        #!/bin/bash
        set -e

        echo "=== Processing ${{ steps.find-changed-projects.outputs.project_count }} changed projects ==="

        if [[ ${{ steps.find-changed-projects.outputs.project_count }} -eq 0 ]]; then
          echo "No projects with changes detected. Skipping SCIP index generation."
          echo "success_count=0" >> $GITHUB_OUTPUT
          echo "total_count=0" >> $GITHUB_OUTPUT
          echo "failed_projects=" >> $GITHUB_OUTPUT
          echo "skipped=true" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Initialize counters
        success_count=0
        total_count=0
        failed_projects=""

        # Function to detect project language and generate index
        generate_scip_index() {
          local dir=$1
          echo "Processing directory: $dir"
          
          cd "$dir"
          local project_success=false
          
          # Check for Go projects
          if [[ -f "go.mod" ]]; then
            echo "  -> Detected Go project"
            echo "  -> Generating Go SCIP index..."
            if scip-go --output=index.scip; then
              project_success=true
            else
              echo "  -> Failed to generate Go index"
              failed_projects="$failed_projects\n- $dir (Go)"
            fi
            ((total_count++))
          fi
          
          # Check for Node.js/TypeScript projects
          if [[ -f "package.json" ]]; then
            echo "  -> Detected Node.js/TypeScript project"
            
            # Install dependencies if needed
            if [[ -f "package-lock.json" ]]; then
              npm ci
            elif [[ -f "yarn.lock" ]]; then
              if ! command -v yarn &> /dev/null; then
                npm install -g yarn
              fi
              yarn install --frozen-lockfile
            elif [[ -f "pnpm-lock.yaml" ]]; then
              if ! command -v pnpm &> /dev/null; then
                npm install -g pnpm
              fi
              pnpm install --frozen-lockfile
            else
              npm install
            fi
            
            echo "  -> Generating TypeScript SCIP index..."
            if scip-typescript index --output=index.scip; then
              project_success=true
            else
              echo "  -> Failed to generate TypeScript index"
              failed_projects="$failed_projects\n- $dir (TypeScript)"
            fi
            ((total_count++))
          fi
          
          # Check for Python projects
          if [[ -f "setup.py" ]] || [[ -f "pyproject.toml" ]] || [[ -f "requirements.txt" ]] || [[ -f "Pipfile" ]]; then
            echo "  -> Detected Python project"
            
            # Install dependencies if requirements file exists
            if [[ -f "requirements.txt" ]]; then
              pip3 install -r requirements.txt || echo "  -> Failed to install Python dependencies"
            elif [[ -f "pyproject.toml" ]]; then
              pip3 install . || echo "  -> Failed to install Python project"
            fi
            
            echo "  -> Generating Python SCIP index..."
            if scip-python index --output=index.scip; then
              project_success=true
            else
              echo "  -> Failed to generate Python index"
              failed_projects="$failed_projects\n- $dir (Python)"
            fi
            ((total_count++))
          fi
          
          # Check for Java/Maven projects
          if [[ -f "pom.xml" ]]; then
            echo "  -> Detected Maven project"
            echo "  -> Generating Java SCIP index..."
            if scip-java index --output=index.scip; then
              project_success=true
            else
              echo "  -> Failed to generate Java index"
              failed_projects="$failed_projects\n- $dir (Maven)"
            fi
            ((total_count++))
          fi
          
          # Check for Java/Gradle projects
          if [[ -f "build.gradle" ]] || [[ -f "build.gradle.kts" ]]; then
            echo "  -> Detected Gradle project"
            echo "  -> Generating Java SCIP index..."
            if scip-java index --output=index.scip; then
              project_success=true
            else
              echo "  -> Failed to generate Java index"
              failed_projects="$failed_projects\n- $dir (Gradle)"
            fi
            ((total_count++))
          fi
          
          # Check if index was created
          if [[ -f "index.scip" ]]; then
            echo "  -> ✅ Successfully generated index.scip ($(stat -c%s index.scip 2>/dev/null || stat -f%z index.scip 2>/dev/null || echo "unknown") bytes)"
            if $project_success; then
              ((success_count++))
            fi
          else
            echo "  -> ❌ No index.scip generated"
          fi
          
          cd - > /dev/null
        }

        # Process only the changed projects
        echo -e "${{ steps.find-changed-projects.outputs.changed_projects }}" | while read -r project_dir; do
          if [[ -n "$project_dir" ]]; then
            generate_scip_index "$project_dir"
          fi
        done

        # Export results for use in comment
        echo "success_count=$success_count" >> $GITHUB_OUTPUT
        echo "total_count=$total_count" >> $GITHUB_OUTPUT
        {
          echo "failed_projects<<EOF"
          echo -e "$failed_projects"
          echo "EOF"
        } >> $GITHUB_OUTPUT
        echo "skipped=false" >> $GITHUB_OUTPUT

    - name: List generated indexes
      id: list-indexes
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "=== Generated SCIP index files ==="
        index_list=""
        total_size=0
        
        find . -name "index.scip" -type f | while read -r scip_file; do
          dir=$(dirname "$scip_file")
          size=$(stat -c%s "$scip_file" 2>/dev/null || stat -f%z "$scip_file" 2>/dev/null || echo "0")
          total_size=$((total_size + size))
          echo "📁 $dir -> index.scip ($size bytes)"
          
          # Format size for display
          if command -v numfmt &> /dev/null; then
            formatted_size=$(numfmt --to=iec-i --suffix=B $size)
          else
            formatted_size="${size}B"
          fi
          
          index_list="$index_list\n- \`$dir\` ($formatted_size)"
        done
        
        {
          echo "index_list<<EOF"
          echo -e "$index_list"
          echo "EOF"
        } >> $GITHUB_OUTPUT
        
        # Format total size
        if command -v numfmt &> /dev/null; then
          total_size_formatted=$(numfmt --to=iec-i --suffix=B $total_size)
        else
          total_size_formatted="${total_size}B"
        fi
        
        echo "total_size=$total_size_formatted" >> $GITHUB_OUTPUT

    - name: Comment on PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const successCount = '${{ steps.generate-indexes.outputs.success_count }}';
          const totalCount = '${{ steps.generate-indexes.outputs.total_count }}';
          const failedProjects = `${{ steps.generate-indexes.outputs.failed_projects }}`;
          const indexList = `${{ steps.list-indexes.outputs.index_list }}`;
          const totalSize = '${{ steps.list-indexes.outputs.total_size }}';
          const skipped = '${{ steps.generate-indexes.outputs.skipped }}' === 'true';
          const projectCount = '${{ steps.find-changed-projects.outputs.project_count }}';
          
          let comment = `## 🔍 SCIP Index Generation Results
          
          `;
          
          if (skipped) {
            comment += `**Status:** ⚪ Skipped - No project files changed
            
            ### Summary
            - **PR:** #${{ github.event.number }}
            - **Commit:** \`${{ github.event.pull_request.head.sha }}\`
            - **Branch:** \`${{ github.event.pull_request.head.ref }}\`
            - **Changed projects:** 0
            
            No projects with source code changes detected in this PR.`;
          } else {
            const status = successCount == totalCount ? '✅' : '⚠️';
            const statusText = successCount == totalCount ? 'All changed projects processed successfully' : `${successCount}/${totalCount} changed projects processed successfully`;
            
            comment += `**Status:** ${status} ${statusText}
            
            ### Summary
            - **PR:** #${{ github.event.number }}
            - **Commit:** \`${{ github.event.pull_request.head.sha }}\`
            - **Branch:** \`${{ github.event.pull_request.head.ref }}\`
            - **Changed projects:** ${projectCount}
            - **Total indexes generated:** ${successCount}
            - **Total size:** ${totalSize}
            `;
            
            if (indexList && indexList.trim() !== '') {
              comment += `
            ### Generated Indexes
            ${indexList}
            `;
            }
            
            if (failedProjects && failedProjects.trim() !== '') {
              comment += `
            ### Failed Projects
            ${failedProjects}
            `;
            }
          }
          
          comment += `
          
          <details>
          <summary>View workflow details</summary>
          
          - **Workflow:** ${{ github.workflow }}
          - **Run ID:** ${{ github.run_id }}
          - **Run Number:** ${{ github.run_number }}
          - **Actor:** @${{ github.actor }}
          
          [View full workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          </details>`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });