name: 'Generate SCIP Indexes for Changed Projects'
description: 'Automatically generates SCIP indexes for projects that have changed files'
branding:
  icon: 'search'
  color: 'blue'

inputs:
  working-directory:
    description: 'Working directory to run the action from'
    required: false
    default: '.'
  kusari-client-id:
    description: 'Kusari client ID for authentication'
    required: true
  kusari-client-secret:
    description: 'Kusari client secret for authentication'
    required: true
  github-token:
    description: 'GitHub token for posting PR comments'
    required: true
    default: ${{ github.token }}

outputs:
  scip-indexes:
    description: 'List of generated SCIP index files'
    value: ${{ steps.generate-indexes.outputs.scip_indexes }}

runs:
  using: 'composite'
  steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 'stable'

    - name: Install Kusari CLI
      shell: bash
      run: |
        go install github.com/kusaridev/kusari-cli/kusari@latest
        echo "$HOME/go/bin" >> $GITHUB_PATH

    - name: Authenticate with Kusari
      shell: bash
      env:
        KUSARI_CLIENT_ID: ${{ inputs.kusari-client-id }}
        KUSARI_CLIENT_SECRET: ${{ inputs.kusari-client-secret }}
      run: |
        kusari auth login -p https://auth.dev.kusari.cloud/

    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v44
      with:
        files: |
          **/*.{go,ts,tsx,js,jsx,py,java,scala,kt}
          **/go.mod
          **/package.json
          **/setup.py
          **/pyproject.toml
          **/requirements.txt
          **/Pipfile
          **/pom.xml
          **/build.gradle
          **/build.gradle.kts

    - name: Generate SCIP indexes
      id: generate-indexes
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        # Check if any relevant files changed
        if [[ "${{ steps.changed-files.outputs.any_changed }}" != "true" ]]; then
          echo "No relevant files changed"
          echo "scip_indexes=" >> "$GITHUB_OUTPUT"
          exit 0
        fi
        
        echo "Changed files:"
        echo "${{ steps.changed-files.outputs.all_changed_files }}"
        
        # Function to find project root
        find_project_root() {
          local file_path="$1"
          local dir=$(dirname "$file_path")
          
          while [[ "$dir" != "." && "$dir" != "/" ]]; do
            if [[ -f "$dir/go.mod" || -f "$dir/package.json" || -f "$dir/setup.py" || \
                  -f "$dir/pyproject.toml" || -f "$dir/pom.xml" || \
                  -f "$dir/build.gradle" || -f "$dir/build.gradle.kts" ]]; then
              echo "$dir"
              return
            fi
            dir=$(dirname "$dir")
          done
          
          # Check root directory
          if [[ -f "go.mod" || -f "package.json" || -f "setup.py" || \
                -f "pyproject.toml" || -f "pom.xml" || \
                -f "build.gradle" || -f "build.gradle.kts" ]]; then
            echo "."
          fi
        }
        
        # Find unique project directories
        declare -A projects
        for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
          # Remove working directory prefix if present
          relative_file="${file#${{ inputs.working-directory }}/}"
          project_root=$(find_project_root "$relative_file")
          
          if [[ -n "$project_root" ]]; then
            projects["$project_root"]=1
            echo "Found project: $project_root (from changed file: $file)"
          fi
        done
        
        # Exit if no projects found
        if [[ ${#projects[@]} -eq 0 ]]; then
          echo "No projects found for changed files"
          echo "scip_indexes=" >> "$GITHUB_OUTPUT"
          exit 0
        fi
        
        # Generate SCIP indexes for each project
        for project_dir in "${!projects[@]}"; do
          echo "Processing project: $project_dir"
          
          if [[ ! -d "$project_dir" ]]; then
            echo "Directory not found: $project_dir"
            continue
          fi
          
          cd "$project_dir"
          
          # Go projects
          if [[ -f "go.mod" ]]; then
            echo "Generating Go SCIP index..."
            if command -v scip-go &> /dev/null; then
              scip-go --output=index.scip || true
            else
              echo "Warning: scip-go not found, skipping Go indexing"
            fi
          fi
          
          # TypeScript/Node.js projects  
          if [[ -f "package.json" ]]; then
            echo "Generating TypeScript SCIP index..."
            # Install dependencies quietly
            if [[ -f "package-lock.json" ]]; then
              npm ci --silent 2>/dev/null || true
            elif [[ -f "yarn.lock" ]]; then
              yarn install --frozen-lockfile --silent 2>/dev/null || true
            else
              npm install --silent 2>/dev/null || true
            fi
            
            if command -v scip-typescript &> /dev/null; then
              # Check for tsconfig.json to determine indexing method
              if [[ -f "tsconfig.json" ]]; then
                echo "Found tsconfig.json, running standard TypeScript indexing"
                scip-typescript index --output=index.scip || true
              else
                echo "No tsconfig.json found, running JavaScript indexing with inferred config"
                scip-typescript index --infer-tsconfig --output=index.scip || true
              fi
            else
              echo "Warning: scip-typescript not found, skipping TypeScript indexing"
            fi
          fi
          
          # Python projects
          if [[ -f "setup.py" || -f "pyproject.toml" || -f "requirements.txt" || -f "Pipfile" ]]; then
            echo "Generating Python SCIP index..."
            # Install dependencies quietly
            if [[ -f "requirements.txt" ]]; then
              pip3 install -q -r requirements.txt 2>/dev/null || true
            elif [[ -f "pyproject.toml" ]]; then
              pip3 install -q . 2>/dev/null || true
            fi
            if command -v scip-python &> /dev/null; then
              scip-python index --output=index.scip || true
            else
              echo "Warning: scip-python not found, skipping Python indexing"
            fi
          fi
          
          # Java projects
          if [[ -f "pom.xml" || -f "build.gradle" || -f "build.gradle.kts" ]]; then
            echo "Generating Java SCIP index..."
            if command -v scip-java &> /dev/null; then
              scip-java index --output=index.scip || true
            else
              echo "Warning: scip-java not found, skipping Java indexing"
            fi
          fi
          
          cd - >/dev/null
        done
        
        # Find and output all generated SCIP indexes
        scip_files=$(find . -name "index.scip" -type f | sort)
        if [[ -n "$scip_files" ]]; then
          echo "Generated SCIP indexes:"
          echo "$scip_files"
          # Format for GitHub output (newlines to spaces)
          echo "scip_indexes=$(echo "$scip_files" | tr '\n' ' ')" >> "$GITHUB_OUTPUT"
        else
          echo "No SCIP indexes generated"
          echo "scip_indexes=" >> "$GITHUB_OUTPUT"
        fi

    - name: Run Kusari Repo Scan
      id: kusari-scan
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        KUSARI_CLIENT_ID: ${{ inputs.kusari-client-id }}
        KUSARI_CLIENT_SECRET: ${{ inputs.kusari-client-secret }}
      run: |
        # Run kusari scan and capture output
        echo "Running Kusari repo scan against base ref: ${{ github.event.pull_request.base.ref }}"
        
        # Run the scan and save output to a file
        if kusari repo scan --platform-url "https://platform.api.dev.kusari.cloud/" ./ ${{ github.event.pull_request.base.ref }} > kusari_scan_output.txt 2>&1; then
          echo "Kusari scan completed successfully"
          scan_exit_code=0
        else
          echo "Kusari scan completed with warnings or errors"
          scan_exit_code=$?
        fi
        
        # Read the output
        scan_output=$(cat kusari_scan_output.txt)
        
        # Save output to GitHub output (escape for multiline)
        {
          echo 'scan_output<<EOF'
          echo "$scan_output"
          echo 'EOF'
        } >> "$GITHUB_OUTPUT"
        
        echo "scan_exit_code=$scan_exit_code" >> "$GITHUB_OUTPUT"

    - name: Post Kusari Scan Results to PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const output = `${{ steps.kusari-scan.outputs.scan_output }}`;
          const exitCode = ${{ steps.kusari-scan.outputs.scan_exit_code }};
          
          const status = exitCode === 0 ? '✅ Success' : '⚠️ Completed with warnings';
          
          const comment = `## Kusari Repository Scan Results ${status}
          
          **Base Reference:** \`${{ github.event.pull_request.base.ref }}\`
          **Scan Exit Code:** ${exitCode}
          
          <details>
          <summary>Scan Output</summary>
          
          \`\`\`
          ${output}
          \`\`\`
          
          </details>
          
          ---
          *Scan performed by Kusari CLI*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
